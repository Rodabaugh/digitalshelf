// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: shows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createShow = `-- name: CreateShow :one
INSERT INTO shows (id, created_at, updated_at, title, season, genre, actors, writer, director, release_date, barcode, shelf_id)
VALUES (
    gen_random_uuid(), NOW(), NOW(), $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, created_at, updated_at, title, season, genre, actors, writer, director, release_date, barcode, shelf_id, search
`

type CreateShowParams struct {
	Title       string
	Season      int32
	Genre       string
	Actors      string
	Writer      string
	Director    string
	ReleaseDate time.Time
	Barcode     string
	ShelfID     uuid.UUID
}

func (q *Queries) CreateShow(ctx context.Context, arg CreateShowParams) (Show, error) {
	row := q.db.QueryRowContext(ctx, createShow,
		arg.Title,
		arg.Season,
		arg.Genre,
		arg.Actors,
		arg.Writer,
		arg.Director,
		arg.ReleaseDate,
		arg.Barcode,
		arg.ShelfID,
	)
	var i Show
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Season,
		&i.Genre,
		&i.Actors,
		&i.Writer,
		&i.Director,
		&i.ReleaseDate,
		&i.Barcode,
		&i.ShelfID,
		&i.Search,
	)
	return i, err
}

const getShowByBarcode = `-- name: GetShowByBarcode :one
SELECT id, created_at, updated_at, title, season, genre, actors, writer, director, release_date, barcode, shelf_id, search FROM shows WHERE barcode = $1
`

func (q *Queries) GetShowByBarcode(ctx context.Context, barcode string) (Show, error) {
	row := q.db.QueryRowContext(ctx, getShowByBarcode, barcode)
	var i Show
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Season,
		&i.Genre,
		&i.Actors,
		&i.Writer,
		&i.Director,
		&i.ReleaseDate,
		&i.Barcode,
		&i.ShelfID,
		&i.Search,
	)
	return i, err
}

const getShowByID = `-- name: GetShowByID :one
SELECT id, created_at, updated_at, title, season, genre, actors, writer, director, release_date, barcode, shelf_id, search FROM shows WHERE id = $1
`

func (q *Queries) GetShowByID(ctx context.Context, id uuid.UUID) (Show, error) {
	row := q.db.QueryRowContext(ctx, getShowByID, id)
	var i Show
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Season,
		&i.Genre,
		&i.Actors,
		&i.Writer,
		&i.Director,
		&i.ReleaseDate,
		&i.Barcode,
		&i.ShelfID,
		&i.Search,
	)
	return i, err
}

const getShowLocation = `-- name: GetShowLocation :one
SELECT locations.id, locations.name
FROM locations
JOIN cases ON locations.id = cases.location_id
JOIN shelves ON cases.id = shelves.case_id
JOIN shows ON shelves.id = shows.shelf_id
WHERE shows.id = $1
`

type GetShowLocationRow struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) GetShowLocation(ctx context.Context, id uuid.UUID) (GetShowLocationRow, error) {
	row := q.db.QueryRowContext(ctx, getShowLocation, id)
	var i GetShowLocationRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getShows = `-- name: GetShows :many
SELECT id, created_at, updated_at, title, season, genre, actors, writer, director, release_date, barcode, shelf_id, search FROM shows
`

func (q *Queries) GetShows(ctx context.Context) ([]Show, error) {
	rows, err := q.db.QueryContext(ctx, getShows)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Show
	for rows.Next() {
		var i Show
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Season,
			&i.Genre,
			&i.Actors,
			&i.Writer,
			&i.Director,
			&i.ReleaseDate,
			&i.Barcode,
			&i.ShelfID,
			&i.Search,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShowsByLocation = `-- name: GetShowsByLocation :many
SELECT shows.id, shows.created_at, shows.updated_at, title, season, genre, actors, writer, director, release_date, barcode, shelf_id, search, shelves.id, shelves.created_at, shelves.updated_at, shelves.name, case_id, cases.id, cases.created_at, cases.updated_at, cases.name, location_id, locations.id, locations.created_at, locations.updated_at, locations.name, owner_id FROM shows
INNER JOIN shelves
ON shows.shelf_id = shelves.id
INNER JOIN cases
ON shelves.case_id = cases.id
INNER JOIN locations
ON cases.location_id = locations.id
WHERE locations.id = $1
`

type GetShowsByLocationRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Season      int32
	Genre       string
	Actors      string
	Writer      string
	Director    string
	ReleaseDate time.Time
	Barcode     string
	ShelfID     uuid.UUID
	Search      interface{}
	ID_2        uuid.UUID
	CreatedAt_2 time.Time
	UpdatedAt_2 time.Time
	Name        string
	CaseID      uuid.UUID
	ID_3        uuid.UUID
	CreatedAt_3 time.Time
	UpdatedAt_3 time.Time
	Name_2      string
	LocationID  uuid.UUID
	ID_4        uuid.UUID
	CreatedAt_4 time.Time
	UpdatedAt_4 time.Time
	Name_3      string
	OwnerID     uuid.UUID
}

func (q *Queries) GetShowsByLocation(ctx context.Context, id uuid.UUID) ([]GetShowsByLocationRow, error) {
	rows, err := q.db.QueryContext(ctx, getShowsByLocation, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetShowsByLocationRow
	for rows.Next() {
		var i GetShowsByLocationRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Season,
			&i.Genre,
			&i.Actors,
			&i.Writer,
			&i.Director,
			&i.ReleaseDate,
			&i.Barcode,
			&i.ShelfID,
			&i.Search,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.Name,
			&i.CaseID,
			&i.ID_3,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.Name_2,
			&i.LocationID,
			&i.ID_4,
			&i.CreatedAt_4,
			&i.UpdatedAt_4,
			&i.Name_3,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShowsByShelf = `-- name: GetShowsByShelf :many
SELECT id, created_at, updated_at, title, season, genre, actors, writer, director, release_date, barcode, shelf_id, search FROM shows WHERE shelf_id = $1
`

func (q *Queries) GetShowsByShelf(ctx context.Context, shelfID uuid.UUID) ([]Show, error) {
	rows, err := q.db.QueryContext(ctx, getShowsByShelf, shelfID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Show
	for rows.Next() {
		var i Show
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Season,
			&i.Genre,
			&i.Actors,
			&i.Writer,
			&i.Director,
			&i.ReleaseDate,
			&i.Barcode,
			&i.ShelfID,
			&i.Search,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchShows = `-- name: SearchShows :many
SELECT shows.id, shows.created_at, shows.updated_at, title, season, genre, actors, writer, director, release_date, barcode, shelf_id,
    CAST(
        ts_rank(search, websearch_to_tsquery('english', $1)) + 
        ts_rank(search, websearch_to_tsquery('simple', $1)) AS float8
    ) AS rank
FROM shows
INNER JOIN shelves
ON shows.shelf_id = shelves.id
INNER JOIN cases
ON shelves.case_id = cases.id
INNER JOIN locations
ON cases.location_id = locations.id
WHERE search @@ websearch_to_tsquery('english', $1)
OR search @@ websearch_to_tsquery('simple', $1)
AND locations.id = $2
ORDER BY rank DESC
`

type SearchShowsParams struct {
	WebsearchToTsquery string
	ID                 uuid.UUID
}

type SearchShowsRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Season      int32
	Genre       string
	Actors      string
	Writer      string
	Director    string
	ReleaseDate time.Time
	Barcode     string
	ShelfID     uuid.UUID
	Rank        float64
}

func (q *Queries) SearchShows(ctx context.Context, arg SearchShowsParams) ([]SearchShowsRow, error) {
	rows, err := q.db.QueryContext(ctx, searchShows, arg.WebsearchToTsquery, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchShowsRow
	for rows.Next() {
		var i SearchShowsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Season,
			&i.Genre,
			&i.Actors,
			&i.Writer,
			&i.Director,
			&i.ReleaseDate,
			&i.Barcode,
			&i.ShelfID,
			&i.Rank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
