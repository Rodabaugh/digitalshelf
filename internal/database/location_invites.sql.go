// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: location_invites.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addLocationInvite = `-- name: AddLocationInvite :one
INSERT INTO location_invites (location_id, user_id, invited_at)
VALUES (
    $1, $2, NOW()
)
RETURNING location_id, user_id, invited_at
`

type AddLocationInviteParams struct {
	LocationID uuid.UUID
	UserID     uuid.UUID
}

func (q *Queries) AddLocationInvite(ctx context.Context, arg AddLocationInviteParams) (LocationInvite, error) {
	row := q.db.QueryRowContext(ctx, addLocationInvite, arg.LocationID, arg.UserID)
	var i LocationInvite
	err := row.Scan(&i.LocationID, &i.UserID, &i.InvitedAt)
	return i, err
}

const getLocationInvites = `-- name: GetLocationInvites :many
SELECT location_invites.location_id, users.id, users.name, users.email, location_invites.invited_at
FROM users
INNER JOIN location_invites
ON users.ID = location_invites.user_id
WHERE location_invites.location_id = $1
`

type GetLocationInvitesRow struct {
	LocationID uuid.UUID
	ID         uuid.UUID
	Name       string
	Email      string
	InvitedAt  time.Time
}

func (q *Queries) GetLocationInvites(ctx context.Context, locationID uuid.UUID) ([]GetLocationInvitesRow, error) {
	rows, err := q.db.QueryContext(ctx, getLocationInvites, locationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLocationInvitesRow
	for rows.Next() {
		var i GetLocationInvitesRow
		if err := rows.Scan(
			&i.LocationID,
			&i.ID,
			&i.Name,
			&i.Email,
			&i.InvitedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserInvites = `-- name: GetUserInvites :many
SELECT location_invites.user_id, locations.id, locations.name, locations.owner_id, location_invites.invited_at
FROM locations
INNER JOIN location_invites
ON locations.ID = location_invites.location_id
WHERE location_invites.user_id = $1
`

type GetUserInvitesRow struct {
	UserID    uuid.UUID
	ID        uuid.UUID
	Name      string
	OwnerID   uuid.UUID
	InvitedAt time.Time
}

func (q *Queries) GetUserInvites(ctx context.Context, userID uuid.UUID) ([]GetUserInvitesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserInvites, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserInvitesRow
	for rows.Next() {
		var i GetUserInvitesRow
		if err := rows.Scan(
			&i.UserID,
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.InvitedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeLocationInvite = `-- name: RemoveLocationInvite :exec
DELETE FROM location_invites
WHERE location_id = $1 AND user_id = $2
`

type RemoveLocationInviteParams struct {
	LocationID uuid.UUID
	UserID     uuid.UUID
}

func (q *Queries) RemoveLocationInvite(ctx context.Context, arg RemoveLocationInviteParams) error {
	_, err := q.db.ExecContext(ctx, removeLocationInvite, arg.LocationID, arg.UserID)
	return err
}
