// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: shelves.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createShelf = `-- name: CreateShelf :one
INSERT INTO shelves (id, created_at, updated_at, name, case_id)
VALUES (
    gen_random_uuid(), NOW(), NOW(), $1, $2
)
RETURNING id, created_at, updated_at, name, case_id
`

type CreateShelfParams struct {
	Name   string
	CaseID uuid.UUID
}

func (q *Queries) CreateShelf(ctx context.Context, arg CreateShelfParams) (Shelf, error) {
	row := q.db.QueryRowContext(ctx, createShelf, arg.Name, arg.CaseID)
	var i Shelf
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.CaseID,
	)
	return i, err
}

const getShelfByID = `-- name: GetShelfByID :one
SELECT id, created_at, updated_at, name, case_id FROM shelves WHERE id = $1
`

func (q *Queries) GetShelfByID(ctx context.Context, id uuid.UUID) (Shelf, error) {
	row := q.db.QueryRowContext(ctx, getShelfByID, id)
	var i Shelf
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.CaseID,
	)
	return i, err
}

const getShelfLocation = `-- name: GetShelfLocation :one
SELECT locations.id, locations.name
FROM locations
JOIN cases ON locations.id = cases.location_id
JOIN shelves ON cases.id = shelves.case_id
WHERE shelves.id = $1
`

type GetShelfLocationRow struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) GetShelfLocation(ctx context.Context, id uuid.UUID) (GetShelfLocationRow, error) {
	row := q.db.QueryRowContext(ctx, getShelfLocation, id)
	var i GetShelfLocationRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getShelves = `-- name: GetShelves :many
SELECT id, created_at, updated_at, name, case_id FROM shelves
`

func (q *Queries) GetShelves(ctx context.Context) ([]Shelf, error) {
	rows, err := q.db.QueryContext(ctx, getShelves)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shelf
	for rows.Next() {
		var i Shelf
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.CaseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShelvesByCase = `-- name: GetShelvesByCase :many
SELECT id, created_at, updated_at, name, case_id FROM shelves WHERE case_id = $1
`

func (q *Queries) GetShelvesByCase(ctx context.Context, caseID uuid.UUID) ([]Shelf, error) {
	rows, err := q.db.QueryContext(ctx, getShelvesByCase, caseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shelf
	for rows.Next() {
		var i Shelf
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.CaseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
