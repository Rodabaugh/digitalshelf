// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: music.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createMusic = `-- name: CreateMusic :one
INSERT INTO music (id, created_at, updated_at, title, artist, genre, release_date, barcode, format, shelf_id)
VALUES (
    gen_random_uuid(), NOW(), NOW(), $1, $2, $3, $4, $5, $6, $7
) RETURNING id, created_at, updated_at, title, artist, genre, release_date, barcode, format, shelf_id, search
`

type CreateMusicParams struct {
	Title       string
	Artist      string
	Genre       string
	ReleaseDate time.Time
	Barcode     string
	Format      string
	ShelfID     uuid.UUID
}

func (q *Queries) CreateMusic(ctx context.Context, arg CreateMusicParams) (Music, error) {
	row := q.db.QueryRowContext(ctx, createMusic,
		arg.Title,
		arg.Artist,
		arg.Genre,
		arg.ReleaseDate,
		arg.Barcode,
		arg.Format,
		arg.ShelfID,
	)
	var i Music
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Artist,
		&i.Genre,
		&i.ReleaseDate,
		&i.Barcode,
		&i.Format,
		&i.ShelfID,
		&i.Search,
	)
	return i, err
}

const getMusic = `-- name: GetMusic :many
SELECT id, created_at, updated_at, title, artist, genre, release_date, barcode, format, shelf_id, search FROM music
`

func (q *Queries) GetMusic(ctx context.Context) ([]Music, error) {
	rows, err := q.db.QueryContext(ctx, getMusic)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Music
	for rows.Next() {
		var i Music
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Artist,
			&i.Genre,
			&i.ReleaseDate,
			&i.Barcode,
			&i.Format,
			&i.ShelfID,
			&i.Search,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMusicByBarcode = `-- name: GetMusicByBarcode :one
SELECT id, created_at, updated_at, title, artist, genre, release_date, barcode, format, shelf_id, search FROM music WHERE barcode = $1
`

func (q *Queries) GetMusicByBarcode(ctx context.Context, barcode string) (Music, error) {
	row := q.db.QueryRowContext(ctx, getMusicByBarcode, barcode)
	var i Music
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Artist,
		&i.Genre,
		&i.ReleaseDate,
		&i.Barcode,
		&i.Format,
		&i.ShelfID,
		&i.Search,
	)
	return i, err
}

const getMusicByID = `-- name: GetMusicByID :one
SELECT id, created_at, updated_at, title, artist, genre, release_date, barcode, format, shelf_id, search FROM music WHERE id = $1
`

func (q *Queries) GetMusicByID(ctx context.Context, id uuid.UUID) (Music, error) {
	row := q.db.QueryRowContext(ctx, getMusicByID, id)
	var i Music
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Artist,
		&i.Genre,
		&i.ReleaseDate,
		&i.Barcode,
		&i.Format,
		&i.ShelfID,
		&i.Search,
	)
	return i, err
}

const getMusicByLocation = `-- name: GetMusicByLocation :many
SELECT music.id, music.created_at, music.updated_at, title, artist, genre, release_date, barcode, format, shelf_id
FROM music
INNER JOIN shelves
ON music.shelf_id = shelves.id
INNER JOIN cases
ON shelves.case_id = cases.id
INNER JOIN locations
ON cases.location_id = locations.id
WHERE locations.id = $1
`

type GetMusicByLocationRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Artist      string
	Genre       string
	ReleaseDate time.Time
	Barcode     string
	Format      string
	ShelfID     uuid.UUID
}

func (q *Queries) GetMusicByLocation(ctx context.Context, id uuid.UUID) ([]GetMusicByLocationRow, error) {
	rows, err := q.db.QueryContext(ctx, getMusicByLocation, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMusicByLocationRow
	for rows.Next() {
		var i GetMusicByLocationRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Artist,
			&i.Genre,
			&i.ReleaseDate,
			&i.Barcode,
			&i.Format,
			&i.ShelfID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMusicByShelf = `-- name: GetMusicByShelf :many
SELECT id, created_at, updated_at, title, artist, genre, release_date, barcode, format, shelf_id, search FROM music WHERE shelf_id = $1
`

func (q *Queries) GetMusicByShelf(ctx context.Context, shelfID uuid.UUID) ([]Music, error) {
	rows, err := q.db.QueryContext(ctx, getMusicByShelf, shelfID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Music
	for rows.Next() {
		var i Music
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Artist,
			&i.Genre,
			&i.ReleaseDate,
			&i.Barcode,
			&i.Format,
			&i.ShelfID,
			&i.Search,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMusicLocation = `-- name: GetMusicLocation :one
SELECT locations.id, locations.name
FROM locations
JOIN cases ON locations.id = cases.location_id
JOIN shelves ON cases.id = shelves.case_id
JOIN music ON shelves.id = music.shelf_id
WHERE music.id = $1
`

type GetMusicLocationRow struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) GetMusicLocation(ctx context.Context, id uuid.UUID) (GetMusicLocationRow, error) {
	row := q.db.QueryRowContext(ctx, getMusicLocation, id)
	var i GetMusicLocationRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const searchMusic = `-- name: SearchMusic :many
SELECT music.id, music.created_at, music.updated_at, title, artist, genre, release_date, barcode, format, shelf_id,
    CAST(
        ts_rank(search, websearch_to_tsquery('english', $1)) + 
        ts_rank(search, websearch_to_tsquery('simple', $1)) AS float8
    ) AS rank
FROM music
INNER JOIN shelves
ON music.shelf_id = shelves.id
INNER JOIN cases
ON shelves.case_id = cases.id
INNER JOIN locations
ON cases.location_id = locations.id
WHERE search @@ websearch_to_tsquery('english', $1)
OR search @@ websearch_to_tsquery('simple', $1)
AND locations.id = $2
ORDER BY rank DESC
`

type SearchMusicParams struct {
	WebsearchToTsquery string
	ID                 uuid.UUID
}

type SearchMusicRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Artist      string
	Genre       string
	ReleaseDate time.Time
	Barcode     string
	Format      string
	ShelfID     uuid.UUID
	Rank        float64
}

func (q *Queries) SearchMusic(ctx context.Context, arg SearchMusicParams) ([]SearchMusicRow, error) {
	rows, err := q.db.QueryContext(ctx, searchMusic, arg.WebsearchToTsquery, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchMusicRow
	for rows.Next() {
		var i SearchMusicRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Artist,
			&i.Genre,
			&i.ReleaseDate,
			&i.Barcode,
			&i.Format,
			&i.ShelfID,
			&i.Rank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
