// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cases.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createCase = `-- name: CreateCase :one
INSERT INTO cases (id, created_at, updated_at, name, location_id)
VALUES (
    gen_random_uuid(), NOW(), NOW(), $1, $2
)
RETURNING id, created_at, updated_at, name, location_id
`

type CreateCaseParams struct {
	Name       string
	LocationID uuid.UUID
}

func (q *Queries) CreateCase(ctx context.Context, arg CreateCaseParams) (Case, error) {
	row := q.db.QueryRowContext(ctx, createCase, arg.Name, arg.LocationID)
	var i Case
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.LocationID,
	)
	return i, err
}

const getCaseByID = `-- name: GetCaseByID :one
SELECT id, created_at, updated_at, name, location_id FROM cases WHERE id = $1
`

func (q *Queries) GetCaseByID(ctx context.Context, id uuid.UUID) (Case, error) {
	row := q.db.QueryRowContext(ctx, getCaseByID, id)
	var i Case
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.LocationID,
	)
	return i, err
}

const getCaseLocation = `-- name: GetCaseLocation :one
SELECT locations.id, locations.name
FROM locations
JOIN cases ON locations.id = cases.location_id
WHERE cases.id = $1
`

type GetCaseLocationRow struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) GetCaseLocation(ctx context.Context, id uuid.UUID) (GetCaseLocationRow, error) {
	row := q.db.QueryRowContext(ctx, getCaseLocation, id)
	var i GetCaseLocationRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getCases = `-- name: GetCases :many
SELECT id, created_at, updated_at, name, location_id FROM cases
`

func (q *Queries) GetCases(ctx context.Context) ([]Case, error) {
	rows, err := q.db.QueryContext(ctx, getCases)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Case
	for rows.Next() {
		var i Case
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.LocationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCasesByLocation = `-- name: GetCasesByLocation :many
SELECT id, created_at, updated_at, name, location_id FROM cases WHERE location_id = $1
`

func (q *Queries) GetCasesByLocation(ctx context.Context, locationID uuid.UUID) ([]Case, error) {
	rows, err := q.db.QueryContext(ctx, getCasesByLocation, locationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Case
	for rows.Next() {
		var i Case
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.LocationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
