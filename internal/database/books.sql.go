// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: books.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (id, created_at, updated_at, title, author, genre, publication_date, barcode, shelf_id)
VALUES (
    gen_random_uuid(), NOW(), NOW(), $1, $2, $3, $4, $5, $6
) RETURNING id, created_at, updated_at, title, author, genre, publication_date, barcode, shelf_id, search
`

type CreateBookParams struct {
	Title           string
	Author          string
	Genre           string
	PublicationDate time.Time
	Barcode         string
	ShelfID         uuid.UUID
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.Title,
		arg.Author,
		arg.Genre,
		arg.PublicationDate,
		arg.Barcode,
		arg.ShelfID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Author,
		&i.Genre,
		&i.PublicationDate,
		&i.Barcode,
		&i.ShelfID,
		&i.Search,
	)
	return i, err
}

const getBookByBarcode = `-- name: GetBookByBarcode :one
SELECT id, created_at, updated_at, title, author, genre, publication_date, barcode, shelf_id, search FROM books WHERE barcode = $1
`

func (q *Queries) GetBookByBarcode(ctx context.Context, barcode string) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBookByBarcode, barcode)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Author,
		&i.Genre,
		&i.PublicationDate,
		&i.Barcode,
		&i.ShelfID,
		&i.Search,
	)
	return i, err
}

const getBookByID = `-- name: GetBookByID :one
SELECT id, created_at, updated_at, title, author, genre, publication_date, barcode, shelf_id, search FROM books WHERE id = $1
`

func (q *Queries) GetBookByID(ctx context.Context, id uuid.UUID) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBookByID, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Author,
		&i.Genre,
		&i.PublicationDate,
		&i.Barcode,
		&i.ShelfID,
		&i.Search,
	)
	return i, err
}

const getBookLocation = `-- name: GetBookLocation :one
SELECT locations.id, locations.name
FROM locations
JOIN cases ON locations.id = cases.location_id
JOIN shelves ON cases.id = shelves.case_id
JOIN books ON shelves.id = books.shelf_id
WHERE books.id = $1
`

type GetBookLocationRow struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) GetBookLocation(ctx context.Context, id uuid.UUID) (GetBookLocationRow, error) {
	row := q.db.QueryRowContext(ctx, getBookLocation, id)
	var i GetBookLocationRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getBooks = `-- name: GetBooks :many
SELECT id, created_at, updated_at, title, author, genre, publication_date, barcode, shelf_id, search FROM books
`

func (q *Queries) GetBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Author,
			&i.Genre,
			&i.PublicationDate,
			&i.Barcode,
			&i.ShelfID,
			&i.Search,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksByLocation = `-- name: GetBooksByLocation :many
SELECT books.id, books.created_at, books.updated_at, title, author, genre, publication_date, barcode, shelf_id, search, shelves.id, shelves.created_at, shelves.updated_at, shelves.name, case_id, cases.id, cases.created_at, cases.updated_at, cases.name, location_id, locations.id, locations.created_at, locations.updated_at, locations.name, owner_id FROM books
INNER JOIN shelves
ON books.shelf_id = shelves.id
INNER JOIN cases
ON shelves.case_id = cases.id
INNER JOIN locations
ON cases.location_id = locations.id
WHERE locations.id = $1
`

type GetBooksByLocationRow struct {
	ID              uuid.UUID
	CreatedAt       time.Time
	UpdatedAt       time.Time
	Title           string
	Author          string
	Genre           string
	PublicationDate time.Time
	Barcode         string
	ShelfID         uuid.UUID
	Search          interface{}
	ID_2            uuid.UUID
	CreatedAt_2     time.Time
	UpdatedAt_2     time.Time
	Name            string
	CaseID          uuid.UUID
	ID_3            uuid.UUID
	CreatedAt_3     time.Time
	UpdatedAt_3     time.Time
	Name_2          string
	LocationID      uuid.UUID
	ID_4            uuid.UUID
	CreatedAt_4     time.Time
	UpdatedAt_4     time.Time
	Name_3          string
	OwnerID         uuid.UUID
}

func (q *Queries) GetBooksByLocation(ctx context.Context, id uuid.UUID) ([]GetBooksByLocationRow, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByLocation, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBooksByLocationRow
	for rows.Next() {
		var i GetBooksByLocationRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Author,
			&i.Genre,
			&i.PublicationDate,
			&i.Barcode,
			&i.ShelfID,
			&i.Search,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.Name,
			&i.CaseID,
			&i.ID_3,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.Name_2,
			&i.LocationID,
			&i.ID_4,
			&i.CreatedAt_4,
			&i.UpdatedAt_4,
			&i.Name_3,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksByShelf = `-- name: GetBooksByShelf :many
SELECT id, created_at, updated_at, title, author, genre, publication_date, barcode, shelf_id, search FROM books WHERE shelf_id = $1
`

func (q *Queries) GetBooksByShelf(ctx context.Context, shelfID uuid.UUID) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByShelf, shelfID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Author,
			&i.Genre,
			&i.PublicationDate,
			&i.Barcode,
			&i.ShelfID,
			&i.Search,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchBooks = `-- name: SearchBooks :many
SELECT books.id, books.created_at, books.updated_at, title, author, genre, publication_date, barcode, shelf_id,
    CAST(
        ts_rank(search, websearch_to_tsquery('english', $1)) + 
        ts_rank(search, websearch_to_tsquery('simple', $1)) AS float8
    ) AS rank
FROM books
INNER JOIN shelves
ON books.shelf_id = shelves.id
INNER JOIN cases
ON shelves.case_id = cases.id
INNER JOIN locations
ON cases.location_id = locations.id
WHERE search @@ websearch_to_tsquery('english', $1)
OR search @@ websearch_to_tsquery('simple', $1)
AND locations.id = $2
ORDER BY rank DESC
`

type SearchBooksParams struct {
	WebsearchToTsquery string
	ID                 uuid.UUID
}

type SearchBooksRow struct {
	ID              uuid.UUID
	CreatedAt       time.Time
	UpdatedAt       time.Time
	Title           string
	Author          string
	Genre           string
	PublicationDate time.Time
	Barcode         string
	ShelfID         uuid.UUID
	Rank            float64
}

func (q *Queries) SearchBooks(ctx context.Context, arg SearchBooksParams) ([]SearchBooksRow, error) {
	rows, err := q.db.QueryContext(ctx, searchBooks, arg.WebsearchToTsquery, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchBooksRow
	for rows.Next() {
		var i SearchBooksRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Author,
			&i.Genre,
			&i.PublicationDate,
			&i.Barcode,
			&i.ShelfID,
			&i.Rank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
