// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: movies.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (id, created_at, updated_at, title, genre, actors, writer, director, release_date, barcode, shelf_id)
VALUES (
    gen_random_uuid(), NOW(), NOW(), $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, created_at, updated_at, title, genre, actors, writer, director, release_date, barcode, shelf_id, search
`

type CreateMovieParams struct {
	Title       string
	Genre       string
	Actors      string
	Writer      string
	Director    string
	ReleaseDate time.Time
	Barcode     string
	ShelfID     uuid.UUID
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, createMovie,
		arg.Title,
		arg.Genre,
		arg.Actors,
		arg.Writer,
		arg.Director,
		arg.ReleaseDate,
		arg.Barcode,
		arg.ShelfID,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Genre,
		&i.Actors,
		&i.Writer,
		&i.Director,
		&i.ReleaseDate,
		&i.Barcode,
		&i.ShelfID,
		&i.Search,
	)
	return i, err
}

const getMovieByBarcode = `-- name: GetMovieByBarcode :one
SELECT id, created_at, updated_at, title, genre, actors, writer, director, release_date, barcode, shelf_id, search FROM movies WHERE barcode = $1
`

func (q *Queries) GetMovieByBarcode(ctx context.Context, barcode string) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovieByBarcode, barcode)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Genre,
		&i.Actors,
		&i.Writer,
		&i.Director,
		&i.ReleaseDate,
		&i.Barcode,
		&i.ShelfID,
		&i.Search,
	)
	return i, err
}

const getMovieByID = `-- name: GetMovieByID :one
SELECT id, created_at, updated_at, title, genre, actors, writer, director, release_date, barcode, shelf_id, search FROM movies WHERE id = $1
`

func (q *Queries) GetMovieByID(ctx context.Context, id uuid.UUID) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovieByID, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Genre,
		&i.Actors,
		&i.Writer,
		&i.Director,
		&i.ReleaseDate,
		&i.Barcode,
		&i.ShelfID,
		&i.Search,
	)
	return i, err
}

const getMovieLocation = `-- name: GetMovieLocation :one
SELECT locations.id, locations.name
FROM locations
JOIN cases ON locations.id = cases.location_id
JOIN shelves ON cases.id = shelves.case_id
JOIN movies ON shelves.id = movies.shelf_id
WHERE movies.id = $1
`

type GetMovieLocationRow struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) GetMovieLocation(ctx context.Context, id uuid.UUID) (GetMovieLocationRow, error) {
	row := q.db.QueryRowContext(ctx, getMovieLocation, id)
	var i GetMovieLocationRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getMovies = `-- name: GetMovies :many
SELECT id, created_at, updated_at, title, genre, actors, writer, director, release_date, barcode, shelf_id, search FROM movies
`

func (q *Queries) GetMovies(ctx context.Context) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, getMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Genre,
			&i.Actors,
			&i.Writer,
			&i.Director,
			&i.ReleaseDate,
			&i.Barcode,
			&i.ShelfID,
			&i.Search,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMoviesByLocation = `-- name: GetMoviesByLocation :many
SELECT movies.id, movies.created_at, movies.updated_at, title, genre, actors, writer, director, release_date, barcode, shelf_id, search, shelves.id, shelves.created_at, shelves.updated_at, shelves.name, case_id, cases.id, cases.created_at, cases.updated_at, cases.name, location_id, locations.id, locations.created_at, locations.updated_at, locations.name, owner_id FROM movies
INNER JOIN shelves
ON movies.shelf_id = shelves.id
INNER JOIN cases
ON shelves.case_id = cases.id
INNER JOIN locations
ON cases.location_id = locations.id
WHERE locations.id = $1
`

type GetMoviesByLocationRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Genre       string
	Actors      string
	Writer      string
	Director    string
	ReleaseDate time.Time
	Barcode     string
	ShelfID     uuid.UUID
	Search      interface{}
	ID_2        uuid.UUID
	CreatedAt_2 time.Time
	UpdatedAt_2 time.Time
	Name        string
	CaseID      uuid.UUID
	ID_3        uuid.UUID
	CreatedAt_3 time.Time
	UpdatedAt_3 time.Time
	Name_2      string
	LocationID  uuid.UUID
	ID_4        uuid.UUID
	CreatedAt_4 time.Time
	UpdatedAt_4 time.Time
	Name_3      string
	OwnerID     uuid.UUID
}

func (q *Queries) GetMoviesByLocation(ctx context.Context, id uuid.UUID) ([]GetMoviesByLocationRow, error) {
	rows, err := q.db.QueryContext(ctx, getMoviesByLocation, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMoviesByLocationRow
	for rows.Next() {
		var i GetMoviesByLocationRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Genre,
			&i.Actors,
			&i.Writer,
			&i.Director,
			&i.ReleaseDate,
			&i.Barcode,
			&i.ShelfID,
			&i.Search,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.Name,
			&i.CaseID,
			&i.ID_3,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.Name_2,
			&i.LocationID,
			&i.ID_4,
			&i.CreatedAt_4,
			&i.UpdatedAt_4,
			&i.Name_3,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMoviesByShelf = `-- name: GetMoviesByShelf :many
SELECT id, created_at, updated_at, title, genre, actors, writer, director, release_date, barcode, shelf_id, search FROM movies WHERE shelf_id = $1
`

func (q *Queries) GetMoviesByShelf(ctx context.Context, shelfID uuid.UUID) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, getMoviesByShelf, shelfID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Genre,
			&i.Actors,
			&i.Writer,
			&i.Director,
			&i.ReleaseDate,
			&i.Barcode,
			&i.ShelfID,
			&i.Search,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchMovies = `-- name: SearchMovies :many
SELECT movies.id, movies.created_at, movies.updated_at, title, genre, actors, writer, director, release_date, barcode, shelf_id,
    CAST(
        ts_rank(search, websearch_to_tsquery('english', $1)) + 
        ts_rank(search, websearch_to_tsquery('simple', $1)) AS float8
    ) AS rank
FROM movies
INNER JOIN shelves
ON movies.shelf_id = shelves.id
INNER JOIN cases
ON shelves.case_id = cases.id
INNER JOIN locations
ON cases.location_id = locations.id
WHERE search @@ websearch_to_tsquery('english', $1)
OR search @@ websearch_to_tsquery('simple', $1)
AND locations.id = $2
ORDER BY rank DESC
`

type SearchMoviesParams struct {
	WebsearchToTsquery string
	ID                 uuid.UUID
}

type SearchMoviesRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Genre       string
	Actors      string
	Writer      string
	Director    string
	ReleaseDate time.Time
	Barcode     string
	ShelfID     uuid.UUID
	Rank        float64
}

func (q *Queries) SearchMovies(ctx context.Context, arg SearchMoviesParams) ([]SearchMoviesRow, error) {
	rows, err := q.db.QueryContext(ctx, searchMovies, arg.WebsearchToTsquery, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchMoviesRow
	for rows.Next() {
		var i SearchMoviesRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Genre,
			&i.Actors,
			&i.Writer,
			&i.Director,
			&i.ReleaseDate,
			&i.Barcode,
			&i.ShelfID,
			&i.Rank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovie = `-- name: UpdateMovie :one
UPDATE movies
SET updated_at = NOW(), title = $2, genre = $3, actors = $4, writer = $5, director = $6, release_date = $7, barcode = $8, shelf_id = $9
WHERE id = $1
RETURNING id, created_at, updated_at, title, genre, actors, writer, director, release_date, barcode, shelf_id, search
`

type UpdateMovieParams struct {
	ID          uuid.UUID
	Title       string
	Genre       string
	Actors      string
	Writer      string
	Director    string
	ReleaseDate time.Time
	Barcode     string
	ShelfID     uuid.UUID
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, updateMovie,
		arg.ID,
		arg.Title,
		arg.Genre,
		arg.Actors,
		arg.Writer,
		arg.Director,
		arg.ReleaseDate,
		arg.Barcode,
		arg.ShelfID,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Genre,
		&i.Actors,
		&i.Writer,
		&i.Director,
		&i.ReleaseDate,
		&i.Barcode,
		&i.ShelfID,
		&i.Search,
	)
	return i, err
}
