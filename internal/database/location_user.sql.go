// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: location_user.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addLocationMember = `-- name: AddLocationMember :one
INSERT INTO location_user (location_id, user_id, joined_at)
VALUES (
    $1, $2, NOW()
)
RETURNING location_id, user_id, joined_at
`

type AddLocationMemberParams struct {
	LocationID uuid.UUID
	UserID     uuid.UUID
}

func (q *Queries) AddLocationMember(ctx context.Context, arg AddLocationMemberParams) (LocationUser, error) {
	row := q.db.QueryRowContext(ctx, addLocationMember, arg.LocationID, arg.UserID)
	var i LocationUser
	err := row.Scan(&i.LocationID, &i.UserID, &i.JoinedAt)
	return i, err
}

const getLocationMembers = `-- name: GetLocationMembers :many
SELECT location_user.location_id, users.id, users.name, Users.email, location_user.joined_at
FROM users
INNER JOIN location_user
ON users.ID = location_user.user_id
WHERE location_user.location_id = $1
`

type GetLocationMembersRow struct {
	LocationID uuid.UUID
	ID         uuid.UUID
	Name       string
	Email      string
	JoinedAt   time.Time
}

func (q *Queries) GetLocationMembers(ctx context.Context, locationID uuid.UUID) ([]GetLocationMembersRow, error) {
	rows, err := q.db.QueryContext(ctx, getLocationMembers, locationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLocationMembersRow
	for rows.Next() {
		var i GetLocationMembersRow
		if err := rows.Scan(
			&i.LocationID,
			&i.ID,
			&i.Name,
			&i.Email,
			&i.JoinedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserLocations = `-- name: GetUserLocations :many
SELECT location_user.user_id, locations.id, locations.name, locations.owner_id, location_user.joined_at
FROM locations
INNER JOIN location_user
ON locations.ID = location_user.location_id
WHERE location_user.user_id = $1
`

type GetUserLocationsRow struct {
	UserID   uuid.UUID
	ID       uuid.UUID
	Name     string
	OwnerID  uuid.UUID
	JoinedAt time.Time
}

func (q *Queries) GetUserLocations(ctx context.Context, userID uuid.UUID) ([]GetUserLocationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserLocations, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserLocationsRow
	for rows.Next() {
		var i GetUserLocationsRow
		if err := rows.Scan(
			&i.UserID,
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.JoinedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeLocationMember = `-- name: RemoveLocationMember :exec
DELETE FROM location_user
WHERE location_id = $1 AND user_id = $2
`

type RemoveLocationMemberParams struct {
	LocationID uuid.UUID
	UserID     uuid.UUID
}

func (q *Queries) RemoveLocationMember(ctx context.Context, arg RemoveLocationMemberParams) error {
	_, err := q.db.ExecContext(ctx, removeLocationMember, arg.LocationID, arg.UserID)
	return err
}
