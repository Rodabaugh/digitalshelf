// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: locations.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO locations (id, created_at, updated_at, name, owner_id)
VALUES (
    gen_random_uuid(), NOW(), NOW(), $1, $2
)
RETURNING id, created_at, updated_at, name, owner_id
`

type CreateLocationParams struct {
	Name    string
	OwnerID uuid.UUID
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, createLocation, arg.Name, arg.OwnerID)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.OwnerID,
	)
	return i, err
}

const getLocationByID = `-- name: GetLocationByID :one
SELECT id, created_at, updated_at, name, owner_id FROM locations WHERE id = $1
`

func (q *Queries) GetLocationByID(ctx context.Context, id uuid.UUID) (Location, error) {
	row := q.db.QueryRowContext(ctx, getLocationByID, id)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.OwnerID,
	)
	return i, err
}

const getLocations = `-- name: GetLocations :many
SELECT id, created_at, updated_at, name, owner_id FROM locations
`

func (q *Queries) GetLocations(ctx context.Context) ([]Location, error) {
	rows, err := q.db.QueryContext(ctx, getLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLocationsByOwner = `-- name: GetLocationsByOwner :many
SELECT id, created_at, updated_at, name, owner_id FROM locations WHERE owner_id = $1
`

func (q *Queries) GetLocationsByOwner(ctx context.Context, ownerID uuid.UUID) ([]Location, error) {
	rows, err := q.db.QueryContext(ctx, getLocationsByOwner, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
